#–í–µ—Å—å —é–∑–µ—Ä–±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º: "–°–º–æ–∂–µ—Ç –ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —é–∑–µ—Ä–±–æ—Ç?". –ü–æ —á–µ–º—É-—Ç–æ –ø–∏—Å–∞—Ç—å –µ–º—É: @rav1non (—Ç–µ–ª–µ–≥—Ä–∞–º)

from pyrogram.types import Message
from pyrogram.types import ChatPermissions
import time
import asyncio
from pyrogram import Client, filters , types
from random import choice
import random
import requests
import platform
import psutil
from bs4 import BeautifulSoup
import os
import sys
from pyrogram.types import User
from datetime import datetime
import pyowm
import qrcode
from transliterate import translit

afk_mode = False
afk_reason = ""
afk_start_time = 0
last_command_time = {}
api_url = 'https://api.tenor.com/v1/random?key=LIVDSRZULELA&limit=1&q=komaru'
url = "https://x0.at/5wuk.mp4"

with open("kub.info", "r") as file:
    lines = file.readlines()
    api_id = int(lines[0].strip())
    api_hash = lines[1].strip()
    my_user_id = int(lines[2].strip())
    prefix = lines[3].strip()
    api_owm = lines[4].strip()

app = Client("kub", api_hash=api_hash, api_id=api_id)
start_time = datetime.now()

@app.on_message(filters.me & filters.command("afk", prefixes=prefix) & filters.me)
def set_afk_mode(_, message):
    global afk_mode, afk_reason, afk_start_time
    afk_mode = True
    afk_reason = " ".join(message.command[1:])
    afk_start_time = datetime.now()
    message.edit_text("```–°–û–û–ë–©–ï–ù–ò–ï –û–¢ KUB\nüò¥AFK –≤–∫–ª—é—á–µ–Ω–æ!```")


@app.on_message(filters.mentioned)
def check_afk(client, message):
    if afk_mode:
        current_time = datetime.now()
        time_diff = current_time - afk_start_time
        message.reply_text(f"```–°–û–û–ë–©–ï–ù–ò–ï –û–¢ KUB\nüí§–Æ–∑–µ—Ä —Å–µ–π—á–∞—Å –≤ AFK. \n–í—Ä–µ–º—è AFK - {time_diff} \n–ü—Ä–∏—á–∏–Ω–∞ - {afk_reason}```")


# –ö–æ–º–∞–Ω–¥–∞ "afkoff"
@app.on_message(filters.me & filters.command("afkoff", prefixes=prefix) & filters.me)
def unset_afk_mode(client, message):
    global afk_mode
    afk_mode = False
    message.edit_text("```–°–û–û–ë–©–ï–ù–ò–ï –û–¢ KUB\nü•±AFK –≤—ã–∫–ª—é—á–µ–Ω–æ!```")

@app.on_message(filters.command("kuboff", prefixes=prefix) & filters.me)
async def kuboff_command(client, message):
    try:
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        uptime = datetime.now() - start_time
        hours, remainder = divmod(int(uptime.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        uptime_str = f"{hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç, {seconds} —Å–µ–∫—É–Ω–¥"
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        shutdown_message = f"```–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç KUB:\nüí§ –Æ–∑–µ—Ä–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω. –û–Ω –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª {uptime_str}.```"

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"Shutdown message: {shutdown_message}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        if shutdown_message.strip():
            await message.edit_text(shutdown_message)
        else:
            print("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
            return

        # –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        await asyncio.sleep(3)

        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
        await app.stop()
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
@app.on_message(filters.command("swap", prefixes=prefix) & filters.me)
def swap(client, message):
    original_text = message.reply_to_message.text
    swapped_text = swap_layout(original_text)
    message.edit_text(swapped_text)

eng_to_rus = str.maketrans(
    "qwertyuiop[]asdfghjkl;'zxcvbnm,.`",
    "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é—ë"
)
rus_to_eng = str.maketrans(
    "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é—ë",
    "qwertyuiop[]asdfghjkl;'zxcvbnm,.`"
)


def swap_layout(text):
    words = text.split()
    swapped_words = []
    for word in words:
        if word.isupper():
            swapped_word = word.lower().translate(rus_to_eng if '–∞' <= word.lower()[0] <= '—è' or word.lower()[0] == '—ë' else eng_to_rus)
            swapped_words.append(swapped_word.upper())
        else:
            swapped_words.append(word.translate(rus_to_eng if '–∞' <= word.lower()[0] <= '—è' or word.lower()[0] == '—ë' else eng_to_rus))
    return ' '.join(swapped_words)

@app.on_message(filters.command("tagall", prefixes=prefix) & filters.group & filters.me)
def tag_all_members(client, message):
    chat_id = message.chat.id
    members = client.get_chat_members(chat_id)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    usernames = [member.user.username for member in members if member.user.username]
    user_mentions = " ".join([f"@{username}" for username in usernames])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    client.send_message(chat_id,f"```\n–û—Ç–º–µ—Ç–∏–ª –≤—Å–µ—Ö:```{user_mentions}")
    
    # –°–∫—Ä—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã "+tagall"
    message.delete()

@app.on_message(filters.command("mqr", prefixes=prefix) & filters.me)
async def generate_qr_code(client, message):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "+mqr"
    command, _, text = message.text.partition(" ")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
    qr = qrcode.make(text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR-–∫–æ–¥ –∫–∞–∫ —Ñ–∞–π–ª
    qr_file = "qr_code.png"
    qr.save(qr_file)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
    await client.send_photo(
        chat_id=message.chat.id,
        photo=qr_file
    )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª QR-–∫–æ–¥–∞
    os.remove(qr_file)
    await message.delete()
    
@app.on_message(filters.command("rrot5", prefixes=prefix) & filters.me)
def encrypt_text(client, message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.split(maxsplit=1)[1]
    encrypted_text = ''

    for char in text:
        if char.isalpha():
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞
            code = ord(char)
            # –®–∏—Ñ—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
            if '–∞' <= char <= '—è':
                code = (code - ord('–∞') + 5) % 32 + ord('–∞')
            elif '–ê' <= char <= '–Ø':
                code = (code - ord('–ê') + 5) % 32 + ord('–ê')
            char = chr(code)
        encrypted_text += char

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç
    message.edit_text("```\n–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–ª —Ç–µ–∫—Å—Ç:```\n " + '`' + encrypted_text + '`')

@app.on_message(filters.command("drrot5", prefixes=prefix) & filters.me)
def decrypt_text(client, message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.split(maxsplit=1)[1]
    decrypted_text = ''

    for char in text:
        if char.isalpha():
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞
            code = ord(char)
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
            if '–∞' <= char <= '—è':
                code = (code - ord('–∞') - 5) % 32 + ord('–∞')
            elif '–ê' <= char <= '–Ø':
                code = (code - ord('–ê') - 5) % 32 + ord('–ê')
            char = chr(code)
        decrypted_text += char

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç
    message.edit_text("```\n–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–ª —Ç–µ–∫—Å—Ç:```\n " + '`' + decrypted_text + '`')
    
@app.on_message(filters.command("help", prefixes=prefix) & filters.me)
def help_command(client, message):
    prf = prefix
    message.edit("```–üO–ú–û–©–¨ KUB\n–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å: "f"{prf}\n\n–û–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: 19\n\n–ü–æ–ª—É-–∫–æ–º–∞–Ω–¥: 3\n\n–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n1. "f"{prf}help - –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —é–∑–µ—Ä–±–æ—Ç–∞\n2. "f"{prf}scrkom - –ø–æ—á–µ—Å–∞—Ç—å –ö–æ–º–∞—Ä—É\n3. "f"{prf}kping - –ü–∏–Ω–≥ —Ç–µ–ª–µ–≥—Ä–∞–º–∞\n4. "f"{prf}calc - –≤—ã—á–∏—Å–ª—è–µ—Ç –∫–∞–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. + —ç—Ç–æ —Å–ª–æ–∂–µ–Ω–∏–µ, - –≤—ã—á–∏—Ç–∞–Ω–∏–µ, * —É–º–Ω–æ–∂–µ–Ω–∏–µ, / –¥–µ–ª–µ–Ω–∏–µ, **  —Å—Ç–µ–ø–µ–Ω—å\n5. "f"{prf}iub - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–±\n6. "f"{prf}randkom - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –≥–∏—Ñ–∫—É —Å –∫–æ–º–∞—Ä—É (–∏–Ω–æ–≥–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –∫–∞–∫–∞—è-—Ç–æ –∞–Ω–∏–º–µ —Ñ–∏–≥–Ω—è)\n7. "f"{prf}sysinf - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ\n8. "f"{prf}upk - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —é–∑–µ—Ä–±–æ—Ç\n9. "f"{prf}wiki - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é —Å –í–∏–∫–∏–ø–µ–¥–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–Ω–µ–º–Ω–æ–≥–æ –∫—Ä–∏–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ—Ç–æ–º –±—É–¥–µ—Ç —Ñ–∏–∫—Å)\n10. "f"{prf}rel - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —é–∑–µ—Ä–±–æ—Ç–∞\n11. "f"{prf}weather –≥–æ—Ä–æ–¥ - –≤—ã–¥–∞—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ\n12. "f"{prf}rrot5 —Ç–µ–∫—Å—Ç –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï - —à–∏—Ñ—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —à–∏—Ñ—Ä ROT5\n13. "f"{prf}drrot5  - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —à–∏—Ñ—Ä–∞ ROT5 (drrot5 –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)\n14. "f"{prf}mqr —Ç–µ–∫—Å—Ç - –¥–µ–ª–∞–µ—Ç qr –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç\n15. "f"{prf}tagall - –æ—Ç–º–µ—á–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞\n16. "f"{prf}kuboff - –≤—ã–∫–ª—é—á–∞–µ—Ç —é–∑–µ—Ä–±–æ—Ç\n17. "f"{prf}swap - (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –Ω–∞ —Ä—É—Å—Å–∫—É—é\n18. "f"{prf}afk - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–∞—Å –≤ AFK. –ß—Ç–æ –±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å  AFK –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É afkoff (—Å–ø–∞—Å–∏–±–æ: @telery_userbot2)\n19. .prefix - –∏–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å KUB (—Å–ø–∞—Å–∏–±–æ: @telery_userbot2)\n\n–ü–æ–ª—É-–∫–æ–º–∞–Ω–¥—ã:\n1. "f"{prf}rev - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–∏–≤–µ—Ç - —Ç–µ–≤–∏—Ä–ø)\n2. "f"{prf}version - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∞—è —É –≤–∞—Å –≤–µ—Ä—Å–∏—è —é–∑–µ—Ä–±–æ—Ç–∞ –∏ –≥–¥–µ –µ—ë —Å–∫–∞—á–∞—Ç—å\n3. "f"{prf}dev - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞```")
    
@app.on_message(filters.command("prefix", prefixes=".") & filters.me)
def change_prefix_command(command, message):
    if len(message.command) > 1:
        new_prefix = message.command[1]
        change_prefix(new_prefix)
        message.edit_text(f"```–°–û–û–ë–©–ï–ù–ò–ï –û–¢ KUB\n–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π rel, —á—Ç–æ–±—ã –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω–∏–ª—Å—è.```")
    elif command.startswith(".prefix"):
        with open("userbot.info", "r") as file:
            prefix = file.readlines()[3].strip()
        message.edit_text(f"```–°–û–û–ë–©–ï–ù–ò–ï –û–¢ KUB/n–í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å:\n{prefix}```")


def is_allowed(user_id):
    with open("kub.info", "r") as file:
        first_line = file.readline()
        return str(user_id) in first_line


def change_prefix(new_prefix):
    with open("kub.info", "r+") as file:
        lines = file.readlines()
        lines[3] = new_prefix + "\n"
        file.seek(0)
        file.writelines(lines)
        file.truncate()
    
@app.on_message(filters.command("rev", prefixes=prefix) & filters.me)
def reverse_text(client, message):

    text = message.text.split(" ", 1)[1]
    
    reversed_text = text[::-1]
   
    message.edit_text(reversed_text)
    
@app.on_message(filters.command("dev", prefixes=prefix) & filters.me)
def dev_command(client, message):
    message.edit("**–†–ê–ó–†–ê–ë–û–¢–ß–ò–ö KUB**:\n@rav1non")

@app.on_message(filters.command("weather", prefixes=prefix) & filters.me)
async def get_weather(bot, message):
    chat_id = message.chat.id
    city = " ".join(message.command[1:])
    if not city:
        await bot.send_message(chat_id, '```–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç KUB\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥```')
        await message.delete()
        return
    weather_url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_owm}&units=metric'
    response = requests.get(weather_url)
    weather_data = response.json()
    if weather_data.get("cod") != 404:
        weather_info = f"```–ü–û–ì–û–î–ê –û–¢ KUB –í –ì–û–†–û–î–ï {city}\n‚òÅÔ∏è –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['main']['temp']}¬∞C\nüß• –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:  {weather_data['main']['feels_like']}¬∞C\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['main']['humidity']}%\nüï°  –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['main']['pressure']}–≥–ü–∞\nüí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data['wind']['speed']}–º/—Å```"
        await bot.send_message(chat_id, weather_info)
        await message.delete()
    else:
        await bot.send_message(chat_id, '```–û—à–∏–±–∫–∞\n–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.```')

async def restart_bot(bot, message):
    await bot.send_message(message.chat.id, "```–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç KUB\nKUB –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è```")
    await message.delete()
    os.execl(sys.executable, sys.executable, *sys.argv)

@app.on_message(filters.command("rel", prefixes=prefix) & filters.me)
async def handle_restart_command(bot, message):
    await restart_bot(bot, message)
    
@app.on_message(filters.command("spam", prefixes=prefix) & filters.me)
async def spam_message(client, message):
    if message.reply_to_message:
        text = message.reply_to_message.text # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
        count = 10 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif len(message.command) == 2:
        count = int(message.command[1])
        text = None
    else:
        count, text = message.command[1], message.command[2]
        count = int(count)
        
    if text is not None:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–æ –≤ —á–∏—Å–ª–µ
        for _ in range(count):
            await app.send_message(message.chat.id, text)
            await asyncio.sleep(0)
        await message.delete()
    
@app.on_message(filters.command("version", prefixes=prefix) & filters.me)
def version_command(client, message):
    message.edit("**–í–ï–†–°–ò–Ø 1.0 –î–õ–Ø –í–°–ï–• üêà **")

@app.on_message(filters.command("scrkom", prefixes=prefix) & filters.user([1299931185, 6400632128, 1499962079, 1325079151, 1891411470]))
async def edit_message(app: Client, message: Message):
    url = "https://x0.at/6D5G.mp4"
    msg = await app.send_animation(message.chat.id, url, caption="**–í–´ –ü–û–ß–ï–°–ê–õ–ò –ö–û–ú–ê–†–£**")
    await message.delete()

@app.on_message(filters.command("kping", prefixes=prefix) & filters.me)
def ping(client, message):
    ping = None
    if len(message.text.split(' ', 1)) > 1:
        ping = message.text.split(' ', 1)[1]
    start_time = time.perf_counter_ns()
    message.edit_text("üöÄ")
    end_time = time.perf_counter_ns()
    ping_time = (end_time - start_time) / 1e6
    if ping:
        message.edit_text(
            f"```KUB Ping\nüêà –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ Telegram: {ping} ms\n```"
        )
    else:
        message.edit_text(
            f"```KUB Ping\nüêà –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–∫–ª–∏–∫–∞ Telegram: {ping_time:.3f} ms\n```"
        )
        
@app.on_message(filters.command("calc", prefixes=prefix) & filters.me)
async def calculatorblya(client, message):
    if message.text.startswith("+calc"):
        expression = message.text[6:]
        if len(expression) > 0:
            try:
                result = eval(expression)
                await message.edit_text(f"```–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}```")
            except Exception as e:
                await message.edit_text(f"```–û—à–∏–±–∫–∞\n{e}```")
        else:
            await message.edit_text("```–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã +calc.```")
@app.on_message(filters.command("iub", prefixes=prefix) & filters.me)
async def ping(client, message):
    ping = None
    if len(message.text.split(' ', 1)) > 1:
        ping = message.text.split(' ', 1)[1]
    start_time = time.perf_counter_ns()
    
    await message.edit_text("üöÄ")
    
    end_time = time.perf_counter_ns()
    ping_time = (end_time - start_time) / 1e6
    
    if ping:
        msg = await client.send_photo(message.chat.id, url, caption=f"**KUB**n**Version: 1.3 for dev üêà**n**Developer:** @rav1non\n**Telegram ping:** {ping} ms")
    else:
        msg = await client.send_photo(message.chat.id, url, caption=f"**KUB**\n**Version: 1.3 for dev üêà**\n**Developer:** @rav1non\n**Telegram ping:** {ping_time:.3f} ms")
    
    await message.delete()
    
def get_random_kom_gif():
    response = requests.get(api_url)
    if response.status_code == 200:
        data = response.json()
        if 'results' in data and data['results']:
            gif_url = data['results'][0]['media'][0]['gif']['url']
            return gif_url
        else:
            return None
    else:
        return None

@app.on_message(filters.command("randkom", prefixes=prefix) & filters.me)
async def send_random_kom_gif(client, message):
    gif_url = get_random_kom_gif()
    if gif_url:
        await client.send_animation(message.chat.id, animation=gif_url)
        await message.delete()
    else:
        await client.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≥–∏—Ñ —Å –ö–æ–º–∞—Ä—É.")

def get_system_info():
    system_info = "**–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: `{}`**\n".format(platform.system())
    system_info += "**–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: `{}`**\n".format(platform.processor())
    virtual_memory = psutil.virtual_memory()
    system_info += "**–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: `{}` GB**\n".format(round(virtual_memory.total / (1024.0 ** 3), 2))
    system_info += "**–ó–∞–Ω—è—Ç–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: `{}` GB**\n".format(round(virtual_memory.used / (1024.0 ** 3), 2))
    return system_info
    
@app.on_message(filters.command("sysinf", prefixes=prefix) & filters.me)
async def send_system_info(client, message):
    sys_info = get_system_info()
    await client.send_message(message.chat.id, sys_info)
    await message.delete()

start_time = datetime.now()

@app.on_message(filters.command("upk", prefixes=prefix) & filters.me)
def upk(client, message):
    current_time = datetime.now()
    uptime = current_time - start_time
    days = uptime.days
    hours, remainder = divmod(uptime.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    message.edit_text(f"```Uptime KUB\nKUB —Ä–∞–±–æ—Ç–∞–µ—Ç {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥```")

@app.on_message(filters.command("wiki", prefixes=prefix) & filters.me)
def get_wiki(client, message):
    query = message.text.split(' ', 1)[1]
    url = f"https://ru.wikipedia.org/wiki/{query}"
    
    response = requests.get(url)
    
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        result_div = soup.find('div', class_='mw-parser-output')
        if result_div:
            paragraphs = result_div.find_all('p')
            result = ""
            for p in paragraphs:
                text = p.get_text().strip()
                if len(result + text) < 4096:
                    result += text + "\n"
                else:
                    break
            if result:
                message.edit_text(result)
            else:
                message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
        else:
            message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
    else:
        message.edit_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
        
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run()
